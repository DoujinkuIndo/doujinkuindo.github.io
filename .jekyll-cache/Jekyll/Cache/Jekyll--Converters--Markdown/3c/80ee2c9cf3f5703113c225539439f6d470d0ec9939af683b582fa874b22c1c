I"´<p>Next you can update your site name, avatar and other options using the _config.yml file in the root of your repository (shown below).</p>

<p>Here are simple commands to work with git. I will improve upon it as i keep learning.</p>

<h4 id="start-with-basics">Start with Basics</h4>
<p><code class="language-plaintext highlighter-rouge">git chec out -b branch</code> <br />
switches you to a branch</p>

<p><code class="language-plaintext highlighter-rouge">git checkout -b mybranch1</code> <br />
<code class="language-plaintext highlighter-rouge">vi a.txt</code>  <br />
<code class="language-plaintext highlighter-rouge">git status</code> <br />
<code class="language-plaintext highlighter-rouge">git add a.txt</code> <br />
<code class="language-plaintext highlighter-rouge">git commit -m "change 1: mybranch1: added a line to a.txt"</code> <br />
<code class="language-plaintext highlighter-rouge">git push origin mybranch1</code> <br /></p>

<h3 id="merging-in-github">Merging in GitHub</h3>
<p>Before Creating pull request, you will merge your branch to master. 
After that pull request will be created.
There are few options:</p>
<ul>
  <li>Create a merge commit</li>
  <li>Squash and merge</li>
  <li>Rebase and merge</li>
</ul>

<h5 id="create-a-merge-commit">Create a merge Commit</h5>
<p>First, you need to switch to master using the git checkout command, as follows:</p>

<p><code class="language-plaintext highlighter-rouge">git checkout master</code> <br />
You can now execute the git merge command to merge the new feature into the master branch:</p>

<p><code class="language-plaintext highlighter-rouge">git merge remotes/origin/mybranch1</code> <br />
If this step is completed successfully, your feature_1_beta branch will be fully integrated with the master branch.</p>

<p><em>Troubleshooting 1</em><br />
There are git conflicts <br />
When Git encounters a conflict, it adds 
Â«Â«Â«&lt; and ======= to highlight the parts that caused the conflict 
and need to be resolved.</p>

<p><em>Troubleshooting 2</em><br />
fatal: refusing to merge unrelated histories
git merge remotes/origin/mybranch1 â€“allow-unrelated-histories
using this option it is able to merge it. I still need to dig more into 
why getting this error.</p>

<h5 id="squash-and-merge">Squash and merge</h5>
<p>It squashes all commits into a single commit in master. Good if you do not 
want to preserve history of commits in branch.</p>

<h5 id="rebase-and-merge">Rebase and merge</h5>
<p>It resets the header to latest commits before merge (I need to check more on this
) but may be it helps in resolving conflicts.</p>

<h4 id="delete-a-remote-branch">delete a remote branch</h4>
<p><code class="language-plaintext highlighter-rouge">git push origin --delete mybranch1</code>
this cannot be done by git branch -d command</p>

<h5 id="lists-all-branches">lists all branches</h5>
<p><code class="language-plaintext highlighter-rouge">git branch -a</code> <br />
lists all remote and local branches</p>
:ET