I"y?<p>버전: UE 5.0</p>

<ul>
  <li>RDG그래프를 추가한다.</li>
</ul>

<dl>
  <dt>참고자료</dt>
  <dd><a href="https://docs.unrealengine.com/5.0/en-US/render-dependency-graph-in-unreal-engine/">Render Dependency Graph</a>
, <a href="https://epicgames.ent.box.com/s/ul1h44ozs0t2850ug0hrohlzm53kxwrz">RDG 101 A Crash Course</a>
, <a href="https://www.programmerall.com/article/92242243123/">Analysis of the Unreal Rendering System(11) - RDG</a></dd>
</dl>

<h2 id="개요">개요</h2>

<p>랜더 디펜던시 그래프는 UE 4.22에서 도입한 새로운 렌더링 하위 시스템입니다. DAG 스케줄링 시스템을 기반으로 하여 렌더링 파이프라인의 전체 프레임 최적화를 수행하는 데 사용합니다.</p>

<p>RDG의 아이디어는 GPU에서 즉시 실행되는 것이 아니라 렌더링이 필요한 모든 PASS를 수집한 다음 종속성 순서대로 컴파일 및 실행하며 각 유형의 크롭 및 최적화를 수행합니다.</p>

<p>RDG기본 유형 및 인터페으스는 주로 RenderGraphUtils.h 및 RenderGraphDefinitions.h에 집중되어 있습니다.
    * Engine\Source\Runtime\RenderCore\Public\RenderGraphDefinitions.h에서 볼 수 있습니다.</p>

<p>RDG Resource는 RHI리소스와 직접적으로 연결되는 것이 아니라 RHI 리소스 참조를 래핑한 다음 다른 유형의 리소스에 대해 패킹하고 정보를 추가합니다. <br />
RDG시스템에서는 기본적으로 모든 RHI리소스가 RHI리소스를 추가로 제어, 관리하고 수명 주기, 참조 관계 및 디버깅 정보를 정확하게 저아, 추가, 최적화, 잘라내기, 렌더링 성능 향상을 위한 패키지 등을 합니다.
    * Engine\Source\Runtime\RenderCore\Public\RenderGraphResources.h에서 볼 수 있습니다.</p>

<p>RDG Pass 모듈에는 장벽, 자원 변환, RDGPASS및 기타 개념이 포함됩니다. <br />
RDG의 PASS는 복잡합니다. 소비자, 생산자, 변환 의존성, 다양한 자원 상태, 기타 데이터 및 처리를 포함은 RDG시스템의 핵심입니다. <br />
RDG Pass와 Rendering Pass는 일치하지 않으며 여러 개의 병합된 Pass가 있을 수 있습니다.
    * Engine\Source\Runtime\RHI\Public\RHI.h에서 볼 수 있습니다.</p>

<p>FRDGBuilder는 RDG시스템의 핵심이자 엔진이며 렌더링 패스 및 매개변수 수집, 패스 컴파일, 데이터, 리소스 종속처리, 자르기 및 모든 종류의 데이터 최적화, 실행 인터페이스 제공을 담당하는 대규모 관리입니다. <br />
RDG시스템 드라이브로서 FRDGBuilder는 데이터 저장, 처리 상태 변환, 자동 관리 리소스 수명 주기, 장벽, 잘못된 리소스 자르기, 수집, 컴파일, 통과 실행, 텍스처 또는 버퍼 추출을 담당합니다.</p>

<h2 id="rdg-개발">RDG 개발</h2>

<p>FREDGTexture를 생성하기 위해서는 리소스에 대한 디스크립터를 생성하고 리소스 UAV 및 SRV를 생성할 때 이전에 생성된 리소스를 인스턴스로 사용할 수 있습니다. SRV를 생성하려면 디스크립터의 매개변수로 리소스 인스턴스가 필요합니다. 먼저 디스크립터를 생성한 다음 SRV를 생성합니다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// - Create RDG texture demonstration ----</span>
 <span class="c1">// Create RDG texture description</span>
<span class="n">FRDGTextureDesc</span> <span class="n">TextureDesc</span> <span class="o">=</span> <span class="n">Input</span><span class="p">.</span><span class="n">Texture</span><span class="o">-&gt;</span><span class="n">Desc</span><span class="p">;</span>
<span class="n">TextureDesc</span><span class="p">.</span><span class="n">Reset</span><span class="p">();</span>
<span class="n">TextureDesc</span><span class="p">.</span><span class="n">Format</span> <span class="o">=</span> <span class="n">PF_FloatRGBA</span><span class="p">;</span>
<span class="n">TextureDesc</span><span class="p">.</span><span class="n">ClearValue</span> <span class="o">=</span> <span class="n">FClearValueBinding</span><span class="o">::</span><span class="n">None</span><span class="p">;</span>
<span class="n">TextureDesc</span><span class="p">.</span><span class="n">Flags</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">TexCreate_DepthStencilTargetable</span><span class="p">;</span>
<span class="n">TextureDesc</span><span class="p">.</span><span class="n">Flags</span> <span class="o">|=</span> <span class="n">TexCreate_RenderTargetable</span><span class="p">;</span>
<span class="n">TextureDesc</span><span class="p">.</span><span class="n">Extent</span> <span class="o">=</span> <span class="n">OutputViewport</span><span class="p">.</span><span class="n">Extent</span><span class="p">;</span>
 <span class="c1">// Create RDG texture.</span>
<span class="n">FRDGTextureRef</span> <span class="n">MyRDGTexture</span> <span class="o">=</span> <span class="n">GraphBuilder</span><span class="p">.</span><span class="n">CreateTexture</span><span class="p">(</span><span class="n">TextureDesc</span><span class="p">,</span> <span class="n">TEXT</span><span class="p">(</span><span class="s">"MyRDGTexture"</span><span class="p">));</span>

 <span class="c1">// ---- Create RDG Texture UAV Demonstration ----</span>
<span class="n">FRDGTextureUAVRef</span> <span class="n">MyRDGTextureUAV</span> <span class="o">=</span> <span class="n">GraphBuilder</span><span class="p">.</span><span class="n">CreateUAV</span><span class="p">(</span><span class="n">MyRDGTexture</span><span class="p">);</span>

 <span class="c1">// ---- Create RDG texture SRV demonstration ----</span>
<span class="n">FRDGTextureSRVRef</span> <span class="n">MyRDGTextureSRV</span> <span class="o">=</span> <span class="n">GraphBuilder</span><span class="p">.</span><span class="n">CreateSRV</span><span class="p">(</span><span class="n">FRDGTextureSRVDesc</span><span class="o">::</span><span class="n">CreateWithPixelFormat</span><span class="p">(</span><span class="n">MyRDGTexture</span><span class="p">,</span> <span class="n">PF_FloatRGBA</span><span class="p">));</span>
</code></pre></div></div>

<p>RDG가 생성하지 않은 외부 리소스의 등록은 RegisterExternalTexture를 이용하여 이루어집니다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Create a RHI resource outside RDG.</span>
<span class="n">FRHIResourceCreateInfo</span> <span class="n">CreateInfo</span><span class="p">;</span>
<span class="n">FTexture2DRHIRef</span> <span class="n">MyRHITexture</span> <span class="o">=</span> <span class="n">RHICreateTexture2D</span><span class="p">(</span><span class="mi">1024</span><span class="p">,</span> <span class="mi">768</span><span class="p">,</span> <span class="n">PF_B8G8R8A8</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">TexCreate_CPUReadback</span><span class="p">,</span> <span class="n">CreateInfo</span><span class="p">);</span>

 <span class="c1">// Register an external RHI resource to RDG resources.</span>
<span class="n">FRDGTextureRef</span> <span class="n">MyExternalRDGTexture</span> <span class="o">=</span> <span class="n">GraphBuilder</span><span class="p">.</span><span class="n">RegisterExternalTexture</span><span class="p">(</span><span class="n">MyRHITexture</span><span class="p">);</span>
</code></pre></div></div>

<p>전체 RDG 시스템에 의해 구현된 단위는 RDG Pass이며, 이들의 종속성, 참조, 입력 및 출력은 FRDGBuilder::addPass에 의해 완료됩니다. <br />
RDG Pass와 RHI Pass는 일치하지 않으며 여러 RDG Pass가 RHI Pass실행으로 병합될 수 있습니다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Create a Pass's Shader parameter.</span>
<span class="n">FMyPS</span><span class="o">::</span><span class="n">FParameters</span><span class="o">*</span> <span class="n">PassParameters</span> <span class="o">=</span> <span class="n">GraphBuilder</span><span class="p">.</span><span class="n">AllocParameters</span><span class="o">&lt;</span><span class="n">FMyPS</span><span class="o">::</span><span class="n">FParameters</span><span class="o">&gt;</span><span class="p">();</span>
<span class="n">PassParameters</span><span class="o">-&gt;</span><span class="n">InputTexture</span> <span class="o">=</span> <span class="n">InputTexture</span><span class="p">;</span>
<span class="n">PassParameters</span><span class="o">-&gt;</span><span class="n">RenderTargets</span> <span class="o">=</span> <span class="n">FRenderTargetBinding</span><span class="p">(</span><span class="n">InputTexture</span><span class="p">,</span> <span class="n">InputTextureLoadAction</span><span class="p">);</span>
<span class="n">PassParameters</span><span class="o">-&gt;</span><span class="n">InputSampler</span> <span class="o">=</span> <span class="n">BilinearSampler</span><span class="p">;</span>

 <span class="c1">// Treat the shader.</span>
<span class="n">TShaderMapRef</span><span class="o">&lt;</span><span class="n">FScreenPassVS</span><span class="o">&gt;</span> <span class="n">VertexShader</span><span class="p">(</span><span class="n">View</span><span class="p">.</span><span class="n">ShaderMap</span><span class="p">);</span>
<span class="n">TShaderMapRef</span><span class="o">&lt;</span><span class="n">FMyPS</span><span class="o">&gt;</span> <span class="n">PixelShader</span><span class="p">(</span><span class="n">View</span><span class="p">.</span><span class="n">ShaderMap</span><span class="p">);</span>

<span class="k">const</span> <span class="n">FScreenPassPipelineState</span> <span class="nf">PipelineState</span><span class="p">(</span><span class="n">VertexShader</span><span class="p">,</span> <span class="n">PixelShader</span><span class="p">,</span> <span class="n">AdditiveBlendState</span><span class="p">);</span>

 <span class="c1">// Add RDG Pass.</span>
<span class="n">GraphBuilder</span><span class="p">.</span><span class="n">AddPass</span><span class="p">(</span>
    <span class="n">RDG_EVENT_NAME</span><span class="p">(</span><span class="s">"MyRDGPass"</span><span class="p">),</span>
    <span class="n">PassParameters</span><span class="p">,</span>
    <span class="n">ERDGPassFlags</span><span class="o">::</span><span class="n">Raster</span><span class="p">,</span>
         <span class="c1">// pas of Lambda</span>
    <span class="p">[</span><span class="n">PixelShader</span><span class="p">,</span> <span class="n">PassParameters</span><span class="p">,</span> <span class="n">PipelineState</span><span class="p">]</span> <span class="p">(</span><span class="n">FRHICommandListImmediate</span><span class="o">&amp;</span> <span class="n">RHICmdList</span><span class="p">)</span>
    <span class="p">{</span>
                 <span class="c1">// Set the viewport.</span>
        <span class="n">RHICmdList</span><span class="p">.</span><span class="n">SetViewport</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mi">1024</span><span class="p">,</span> <span class="mi">768</span><span class="p">,</span> <span class="mf">1.0</span><span class="n">f</span><span class="p">);</span>

                 <span class="c1">// Set PSO.</span>
        <span class="n">SetScreenPassPipelineState</span><span class="p">(</span><span class="n">RHICmdList</span><span class="p">,</span> <span class="n">PipelineState</span><span class="p">);</span>

                 <span class="c1">// Set shader parameters.</span>
        <span class="n">SetShaderParameters</span><span class="p">(</span><span class="n">RHICmdList</span><span class="p">,</span> <span class="n">PixelShader</span><span class="p">,</span> <span class="n">PixelShader</span><span class="p">.</span><span class="n">GetPixelShader</span><span class="p">(),</span> <span class="o">*</span><span class="n">PassParameters</span><span class="p">);</span>

                 <span class="c1">// Draw a rectangular area.</span>
        <span class="n">DrawRectangle</span><span class="p">(</span><span class="n">RHICmdList</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1024</span><span class="p">,</span> <span class="mi">768</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">1.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">1.0</span><span class="n">f</span><span class="p">,</span> <span class="n">FIntPoint</span><span class="p">(</span><span class="mi">1024</span><span class="p">,</span> <span class="mi">768</span><span class="p">),</span> <span class="n">FIntPoint</span><span class="p">(</span><span class="mi">1024</span><span class="p">,</span> <span class="mi">768</span><span class="p">),</span> <span class="n">PipelineState</span><span class="p">.</span><span class="n">VertexShader</span><span class="p">,</span> <span class="n">EDRF_Default</span><span class="p">);</span>
    <span class="p">});</span>
</code></pre></div></div>

<p>FRDGBuilder를 만드는 것은 매우 간단합니다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">RenderMyStuff</span><span class="p">(</span><span class="n">FRHICommandListImmediate</span><span class="o">&amp;</span> <span class="n">RHICmdList</span><span class="p">)</span>
<span class="p">{</span>
         <span class="c1">// ---- Create a partial object of frDGBuilder ----</span>
    <span class="n">FRDGBuilder</span> <span class="n">GraphBuilder</span><span class="p">(</span><span class="n">RHICmdList</span><span class="p">,</span> <span class="n">RDG_EVENT_NAME</span><span class="p">(</span><span class="s">"GraphBuilder_RenderMyStuff"</span><span class="p">));</span>
    
    <span class="p">(......)</span>
    
         <span class="c1">// ---- Increase Pass ----</span>
    
    <span class="n">GraphBuilder</span><span class="p">.</span><span class="n">AddPass</span><span class="p">(...);</span>
    
    <span class="p">(......)</span>
    
    <span class="n">GraphBuilder</span><span class="p">.</span><span class="n">AddPass</span><span class="p">(...);</span>
    
    <span class="p">(......)</span>
    
         <span class="c1">// ---- Add resource extraction ----</span>
    
    <span class="n">GraphBuilder</span><span class="p">.</span><span class="n">QueueTextureExtraction</span><span class="p">(...);</span>
    
    <span class="p">(......)</span>
    
         <span class="c1">// ---- Execute frDGbuilder ----</span>
    
    <span class="n">GraphBuilder</span><span class="p">.</span><span class="n">Execute</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="rdg추가하기">RDG추가하기</h2>

<p>렌더 그래프 또는 RDG라고도 하는 렌더 종속성 그래프는 렌더 명령을 컴파일 및 실행할 그래프 데이터 구조에 기록하는 API입니다. RDG는 오류가 발생하기 쉬운 작업을 자동화하여 고급 렌더링 코드를 단순화하고 그래프를 탐색하여 CPU 및 GPU에서 메모리 사용을 최적화하고 렌더 패스를 병렬화합니다.</p>

<ul>
  <li>비동기 컴퓨팅 펜스 스케줄링</li>
  <li>최적의 수명 및 메로리 앨리어싱으로 임시 리소스 할당</li>
  <li>GPU에서 대기 시간을 숨기고 겹침을 개선하기 위해 분할 장벽을 사용한 하위 리소스 전환</li>
  <li>병렬 명력 목록 기록</li>
  <li>그래프에서 사용하지 않는 리소스 및 패스 제거</li>
  <li>API사용 및 리소스 종속성 검증</li>
  <li>RDG Insights의 그래프 구조 및 메모리 수명 시각화</li>
</ul>

:ET