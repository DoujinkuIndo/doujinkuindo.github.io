I"}
<h1 id="마인드">마인드</h1>

<h2 id="왜-코드는-이해하기-쉬워야-할까">왜 코드는 이해하기 쉬워야 할까?</h2>
<p>우리는 코드를 작성하는 시간보다 코드를 보고만 있는 시간을 대부분 차지합니다. 우리에게는 시간은 유한하고 제한시간에 요구사항을 개발하는 게 하나의 목표입니다. 그렇기 때문에 서비스를 운영하고 있는 <strong>내 자신 또는 동료가 코드를 이해하는 데 소비되는 시간을 최소화 해야 합니다.</strong></p>

<h2 id="코드를-완전히-이해한다는-것은-무엇을-의미할까">코드를 완전히 이해한다는 것은 무엇을 의미할까?</h2>
<p>코드를 이해한다는 것은 세가지를 충족했을 때를 의미합니다.</p>

<ul>
  <li>첫째, 코드를 자유롭게 수정이 가능합니다.</li>
  <li>둘째, 버그를 짚어내는 것이 가는ㅇ합니다.</li>
  <li>셋째, 수정된 내용이 작성한 다른 부분의 코드와 어떻게 상호작용 하는지를 알 수 있어야 합니다.</li>
</ul>

<h1 id="이해하기-쉬운-코드-작성방법-정리">이해하기 쉬운 코드 작성방법 정리</h1>

<h2 id="네이밍">네이밍</h2>
<p>변수명/함수명/클래스명의 이름을 결정할 때는 항상 같은 원리가 적용됩니다. <strong>이름은 일종의 설명문으로 간주해야 합니다.</strong> 적절한 이름을 붙일 수 있다는 것은 해당 요소가 바르게 이해되고 바르게 설계되어 있다는 뜻입니다. 반대로 어울리지 않는 이름을 붙여졌다는 것은 해당 요소가 달성해야 할 역활에 대해 프로그래머 자신이 충분히 이해하지 못했다는 뜻입니다.</p>

<p><strong>효과적인 네이밍 작성</strong>
네이밍을 통해 프로그래머끼리 의사소통을 이루어지므로 이름을 적절하지 않으면 코드상의 대화는 성립하지 않습니다. 효과적인 이름을 작성하기 위해서는 이러한 과정이 필요합니다.</p>

<ul>
  <li>이름은 효과와 목적을 설명하도록 합니다.</li>
  <li>이름은 발음 가능한 것으로 합니다.</li>
  <li>이름은 검색 가능하도록 합니다.</li>
</ul>

<p><strong>네이밍을 잘했는지 확인하려면?</strong>
명명에는 이름 가역성이라는 개념이 있습니다. 이는 이름이란 명명의 기반이 된 내용의 설명문을 복원할 수 있어야 한다는 명명 방침입니다. 이 방침을 충족하려면 루프백 확인을 수행해야 합니다.</p>

<p><a href="https://chodragon9.github.io/blog/easy-code/#%EB%84%A4%EC%9D%B4%EB%B0%8D">한번에 하나씩 이해하기</a></p>
:ET