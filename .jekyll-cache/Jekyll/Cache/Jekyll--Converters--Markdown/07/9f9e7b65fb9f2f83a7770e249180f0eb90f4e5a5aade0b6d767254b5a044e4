I"‘
<p>Next you can update your site name, avatar and other options using the _config.yml file in the root of your repository (shown below).</p>

<p>Here are simple commands to work with git. I will improve upon it as i keep learning.</p>

<h4 id="start-with-basics">Start with Basics</h4>
<p><code class="language-plaintext highlighter-rouge">git chec out -b branch</code> <br />
switches you to a branch</p>

<h3 id="merging-in-github">Merging in GitHub</h3>
<p>Before Creating pull request, you will merge your branch to master. 
After that pull request will be created.
There are few options:</p>
<ul>
  <li>Create a merge commit</li>
  <li>Squash and merge</li>
  <li>Rebase and merge</li>
</ul>

<h5 id="create-a-merge-commit">Create a merge Commit</h5>
<p>First, you need to switch to master using the git checkout command, as follows:</p>

<p><code class="language-plaintext highlighter-rouge">git checkout master</code> <br />
You can now execute the git merge command to merge the new feature into the master branch:</p>

<p><code class="language-plaintext highlighter-rouge">git merge feature_1_beta</code> <br />
If this step is completed successfully, your feature_1_beta branch will be fully integrated with the master branch.</p>

<p>However, there is a chance that Git wonâ€™t be able to automatically resolve 
some conflicts, and youâ€™ll have to resolve them manually. 
This normally happens when two branches have different parts of the same file and Git isnâ€™t able to figure out which part to use. This case is shown in the terminal below:</p>

<p>When you open the conflict file in a text editor, you will see the conflicted part, like this:</p>

<p><code class="language-plaintext highlighter-rouge">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
/* code from master that caused conflict */
=======
/* code from feature that caused conflict */
</code><br />
When Git encounters a conflict, it adds 
Â«Â«Â«&lt; and ======= to highlight the parts that caused the conflict 
and need to be resolved. Once you have decided which part of the code to 
keep in the final master branch and have removed the irrelevant code 
(along with the conflict indicators), run git add and git commit commands 
on the conflicted files to generate the merge commit.</p>

<p><strong>Troubleshooting</strong>
fatal: refusing to merge unrelated histories</p>

<h5 id="squash-and-merge">Squash and merge</h5>
<p>It squashes all commits into a single commit in master. Good if you do not 
want to preserve history of commits in branch.</p>

<h5 id="rebase-and-merge">Rebase and merge</h5>
<p>It resets the header to latest commits before merge (I need to check more on this
) but may be it helps in resolving conflicts.</p>

:ET