I"y<details open=""><summary>컴퓨터 프로세서에 따른 자료형 크기</summary>
<div>

    <table>
      <thead>
        <tr>
          <th>컴퓨터 프로세서</th>
          <th>16Bit</th>
          <th>32비트</th>
          <th>64비트</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>char</td>
          <td>1Byte</td>
          <td>1Byte</td>
          <td>1Byte</td>
        </tr>
        <tr>
          <td>short</td>
          <td>2Byte</td>
          <td>2Byte</td>
          <td>2Byte</td>
        </tr>
        <tr>
          <td>int</td>
          <td>2Byte</td>
          <td>4Byte</td>
          <td>4Byte</td>
        </tr>
        <tr>
          <td>long</td>
          <td>4Byte</td>
          <td>4Byte</td>
          <td>8Byte</td>
        </tr>
        <tr>
          <td>long long</td>
          <td> </td>
          <td>8Byte</td>
          <td>&gt;=8Byte</td>
        </tr>
      </tbody>
    </table>

  </div></details>

<pre><code class="language-mermaid">graph LR

NarrowingConversion

IntegralPromotions---&gt;StandardConversion
IntegralConversions---&gt;StandardConversion
FloatingConversions---&gt;StandardConversion
FloatingAndIntegralConversions---&gt;StandardConversion
ArithmeticConversions---&gt;StandardConversion
PointerConversions---&gt;StandardConversion
ReferenceConversions---&gt;StandardConversion
Pointer-to-memberConversions---&gt;StandardConversion

UserdefineConversionSequence---&gt;SecondStandardConversion

SecondStandardConversion---&gt;ImplicitConversion
StandardConversion---&gt;ImplicitConversion

ImplicitConversion(ImplicitConversion)---&gt;TypeConversion


CStyle------&gt;TypeCasting

TypeCasting---&gt;ExplicitConversion

ExplicitConversion(ExplicitConversion)---&gt;TypeConversion

TypeConversion(TypeConversion)

</code></pre>

<ul>
  <li>Conversion Sequence
```mermaid
graph LR</li>
</ul>

<p>StandardConversion—&gt;SecondStandardConversion</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
[Casting](https://docs.microsoft.com/en-us/cpp/cpp/casting?view=msvc-170)



# standard conversion (표준 변환)
C++ 언어에서는 **기본 형식 간의 변환을 정의합니다. 또한 포인터, 참조 및 멤버 포인터 파생 형식에 대한 변환도 정의합니다.** 이러한 변환을 표준 변환이라고 합니다.

standard conversion은 한 유형을 다른 유형으로 변환할 때 **compiler가 적용할 수 있는 기본 제공 규칙 세트**입니다.

즉... 명시하지 않고 캐스팅 가능하다는 것을 의미합니다.

&lt;details&gt;&lt;summary&gt;정수 계열 확장&lt;/summary&gt;
&lt;div markdown="1"&gt;

**정수 형식의 개체는 더 큰 값 집합을 나타낼 수 있는 다른 더 넓은 정수 형식, 즉 형식으로 변환할 수 있습니다.** 이 확대 변환 형식을 '계수 승격'이라고하며, 정수 계수 승격을 사용하면 다른 정수 계수 형식을 사용할 수 있는 모든 곳에서 식에서 다음 형식을 사용할 수 있습니다.

&lt;/div&gt;&lt;/details&gt; 

&lt;details&gt;&lt;summary&gt;

# 명시적 형식 변환 연산자 : ()
C++에서는 함수 호출 구문과 유사한 구문을 사용하여 명시적인 형식 변환을 수행할 수 있습니다.

</code></pre></div></div>
<p>simple-type-name ( expression-list )</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
&lt;details&gt;&lt;summary&gt;어떻게 쓰는가?&lt;/summary&gt;
&lt;div markdown="1"&gt;

```cpp
int i = int(f);
</code></pre></div></div>

<p>함수 스타일 구문에서는 변환을 위해 인수를 둘 이상 지정할 수 있습니다.</p>

<p>&lt;/div&gt;&lt;/details&gt;</p>

<details><summary>캐스트 스타일도 가능하다</summary>
<div>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">float</span> <span class="n">f</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">i</span><span class="p">;</span>
</code></pre></div>    </div>

    <p>캐스트 스타일 변환과 함수 스타일 변환 모두 단일 값에서 변환할 때 동일한 결과를 생성합니다.</p>

  </div></details>

<details><summary>사용자 정의 형식에서 명시적 형식 변환 연산자</summary>
<div>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="nc">Point</span>
<span class="p">{</span>
    <span class="n">Point</span><span class="p">(</span> <span class="kt">short</span> <span class="n">x</span><span class="p">,</span> <span class="kt">short</span> <span class="n">y</span> <span class="p">)</span> <span class="p">{</span> <span class="n">_x</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span> <span class="n">_y</span> <span class="o">=</span> <span class="n">y</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">...</span>
    <span class="kt">short</span> <span class="n">_x</span><span class="p">,</span> <span class="n">_y</span><span class="p">;</span>
<span class="p">};</span>
<span class="p">...</span>
<span class="n">Point</span> <span class="n">pt</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">10</span> <span class="p">);</span>
</code></pre></div>    </div>

  </div></details>

<h1 id="cast">Cast</h1>

<p><a href="https://docs.microsoft.com/en-us/cpp/cpp/cast-operator-parens?view=msvc-170">캐스팅 연산자</a></p>

<p>형식 캐스트는 특정 상황에서 개체 형식을 명시적으로 변환하는 방법을 제공합니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cast-expression: unary-expression
( type-name ) cast-expression
</code></pre></div></div>
<p>컴파일러는 유형 캐스트가 수행된 후 cast-expression유형으로 처리합니다. type-name캐스트를 사용하여 모든 스칼라 유형의 객체를 다른 스칼라 유형으로 또는 그 반대로 변환할 수 있습니다. 명시적 유형 캐스트는 암시적 변환의 효과를 결정하는 동일한 규칙에 의해 제한됩니다. 캐스트에 대한 기타 제한은 특정 유형의 실제 크기 또는 표현으로 인해 발생할 수 있습니다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">i</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">x</span><span class="p">;</span>   <span class="c1">// assign i the integer part of x</span>
</code></pre></div></div>

<p><a href="https://docs.microsoft.com/ko-kr/cpp/cpp/casting-operators?view=msvc-170">캐스팅 규칙</a></p>

<h2 id="const_cast">const_cast</h2>

<h2 id="static_cast">static_cast</h2>

<h2 id="reinterpret_cast">reinterpret_cast</h2>

<h2 id="dynamic_cast">dynamic_cast</h2>

<h3 id="cross-cast">cross cast</h3>

<p>주요 참고자료 : 마이크로 소프트 공식문서</p>
:ET