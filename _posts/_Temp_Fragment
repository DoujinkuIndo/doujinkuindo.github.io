* ShaderToy
* NDC
* Unreal Doc
* Unity Doc

- [ ] [ChoDragon9](https://chodragon9.github.io/blog/easy-code/#%EB%84%A4%EC%9D%B4%EB%B0%8D)
- [ ] [가짜 구멍 추가하기](https://gamedevworks.com/tutorials/ue4-how-to-create-a-fake-hole-in-the-ground-that-you-can-move-it-in-runtime/)

## 엔진코드 보고 공부하기
* 엔진코드를 보면 많은 것을 배울 수 있다. 엔진코드에서 왜 저렇게 했는지 모를때는, Git blame으로 보자. 정말 숨막히게 많이 배울 수 있다.

* **왜라는 질문을 계속해야 합니다.**


<details><summary>질문 노트</summary>
<div markdown="1">

- [ ] 데이터베이스 설계란?
- [ ] PostProcess애셋 내용 정리하기.
- [ ] 변경을 최소화 하는 개발
- [ ] 기획서를 보고 변동사항을 예측하기
- [ ] 코드 변경할 때 오류를 최소화 하기
- [ ] 객체지향 읽기
- [ ] 클래스를 나누는 것은 알아야 하는 양을 늘리고, 클래스를 합치는 것은 코드를 복잡하게 만든다. 적절한 양은 팀의 성질..? 책이 있겠쥐이.. 찾아보자.
- [ ] 최적화란 도대체 어떻게 하는 것인가?
- [ ] VR을 만들 때 피치가 회전하면 굉장히 어지러움을 느낀다고 합니다. 이와 같이 좋은 VR 환경에 대한 모범사례가 필요하다.

</div></details>

<details><summary>관심있는 목록 모음</summary>
<div markdown="1">

- [Virtual Reality Design & User Experience](https://xd.adobe.com/ideas/principles/emerging-technology/virtual-reality-design/)
- [How can we resolve jitter with Physics Constraint Components](https://forums.unrealengine.com/t/how-can-we-resolve-jitter-with-physics-constraint-components/370983)
- [VisualStudio를 위한 인텔리센스 구성](https://ballbot.tistory.com/26)
- [Real-Time Rendering Resources](https://www.realtimerendering.com/)
- [[OpenGL로 배우는 컴퓨터 그래픽스] Chapter 01. 컴퓨터 그래픽스란?](https://wjdgh283.tistory.com/entry/OpenGL%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B7%B8%EB%9E%98%ED%94%BD%EC%8A%A4Chapter-01-%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B7%B8%EB%9E%98%ED%94%BD%EC%8A%A4)
- [객체 지향 - 인코덤, 생물정보 전문위키](http://www.incodom.kr/%EA%B0%9D%EC%B2%B4_%EC%A7%80%ED%96%A5#h_0fb62f549ded771f8910c80d6ba78596)
- [game programming gems - Google Search](https://www.google.com/search?q=game+programming+gems&oq=game+programming+gem&aqs=chrome.0.0i355i512j46i512j69i57j0i512j46i512l2j0i512l2j46i512.5026j0j4&client=ms-android-samsung-ss&sourceid=chrome-mobile&ie=UTF-8#ip=1&scso=_VAjZYralIs-U-Aack7KIDQ3:123)
- [Where to put -debug flag when building a game with Debug Editor? - Programming & Scripting / C++ - Unreal Engine Forums](https://forums.unrealengine.com/t/where-to-put-debug-flag-when-building-a-game-with-debug-editor/145177)
- [언리얼 성능 최적화와 프로파일링](https://velog.io/@huijae0817/%EC%96%B8%EB%A6%AC%EC%96%BC-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94%EC%99%80-%ED%94%84%EB%A1%9C%ED%8C%8C%EC%9D%BC%EB%A7%81)
- [언리얼로 Google Play 결제 시스템 이용하기](https://algorfati.tistory.com/91)
- [ISTQB) Part4 테스트 설계 기법](https://ss-o.tistory.com/129)
- [조금은 느리게 살자: 복소수(複素數, Complex Number)](https://ghebook.blogspot.com/2010/07/complex-number.html)
- [언리얼 엔진의 패스 트레이서 | 언리얼 엔진 5.0 문서](https://docs.unrealengine.com/5.0/ko/path-tracer-in-unreal-engine/)
- [한 번에 언리얼 엔진 멀티 클라이언트 테스트 환경 구축하기 - 넷마블 기술 블로그](https://netmarble.engineering/unreal-engine-multi-client-at-one-time/)
- [이벤트로 UI 업데이트 구동 | 언리얼 엔진 문서](https://docs.unrealengine.com/4.27/ko/InteractiveExperiences/UMG/HowTo/EventBasedUI/)
- [Game state management techniques? - Game Development Stack Exchange](https://gamedev.stackexchange.com/questions/13244/game-state-management-techniques)
- [Networking Overview for Unreal Engine | Unreal Engine 5.0 Documentation](https://docs.unrealengine.com/5.0/en-US/networking-overview-for-unreal-engine/)
- [1.4 - 변수 리플리케이션 [RepNotify] | 언리얼 엔진 문서](https://docs.unrealengine.com/4.27/ko/Resources/ContentExamples/Networking/1_4/)
- [How to update efficiently uniform buffer in shaders?](Development / Rendering - Unreal Engine Forums - https://forums.unrealengine.com/t/how-to-update-efficiently-uniform-buffer-in-shaders/358231)
- [Spline based modeling - General Forums / Blender and CG Discussions - Blender Artists Community](https://blenderartists.org/t/spline-based-modeling/668278)
- [Guide: Blob Effect in UE4](https://80.lv/articles/guide-blob-effect-in-ue4/?amp=1)
- [C++ 로 레벨 로드 및 언로드 | 언리얼 엔진 문서](https://docs.unrealengine.com/4.27/ko/BuildingWorlds/LevelStreaming/HowTo/StreamWithCPP/)
- [skeleton simulation in game pdf - Google 검색](https://www.google.com/search?q=skeleton+simulation+in+game+pdf&source=lmns&bih=670&biw=360&client=ms-android-samsung-ss&prmd=ivn&hl=ko&sa=X&ved=2ahUKEwi2i_yXwoT4AhUQh5QKHRakACsQ_AUoAHoECAAQAw#ip=1)
- [Unreal Engine Performance Guide - GPUOpen](https://gpuopen.com/unreal-engine-performance-guide/)
- [Camera shakes – Parallelcube](https://www.parallelcube.com/2021/03/23/camera-shakes/)
- [[UE4 함수] Add Tick Prerequisite Actor](https://hyo-ue4study.tistory.com/393)
- [Creating Custom Animation Nodes](https://www.unrealengine.com/en-US/blog/creating-custom-animation-nodes)
- [조각별 3차 에르미트 보간 다항식(PCHIP) - MATLAB pchip - MathWorks 한국](https://kr.mathworks.com/help/matlab/ref/pchip.html)
- [The Book of Shaders: smoothstep](https://thebookofshaders.com/glossary/?search=smoothstep)
- [spine-ue4 Runtime Documentation](http://ko.esotericsoftware.com/spine-ue4)
- [UE4 Custom 노드 2D 메타볼 : 네이버 블로그](https://m.blog.naver.com/checkjei/221885213673)
- [언리얼4 C++ 멀티플레이 캐릭터 애니메이션 - Slate Blog](https://lesslate.github.io/unreal4/%EC%96%B8%EB%A6%AC%EC%96%BC4-C++-%EB%A9%80%ED%8B%B0%ED%94%8C%EB%A0%88%EC%9D%B4-%EC%BA%90%EB%A6%AD%ED%84%B0-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98/)
- [Analysis of the Unreal Rendering System (01) - Summary and Foundation - Programmer All](https://programmerall.com/article/13592149018/)
- [[DirectX 12]기본지식 - 명령 목록을 이용한 다중 스레드 활용(개요)](https://lipcoder.tistory.com/63)
- [Benefits of multithreaded renderer - Graphics and GPU Programming - GameDev.net](https://www.gamedev.net/forums/topic/705917-benefits-of-multithreaded-renderer/?page=3)
- [Cascade Shadow Map](https://scahp.tistory.com/39)
- [Robust and Error-Free Geometric Computing - 1st Edition - Dave Eberly](https://www.routledge.com/Robust-and-Error-Free-Geometric-Computing/Eberly/p/book/9781032242187#)
- [Geometric Tools: Samples - Mathematics](https://www.geometrictools.com/Samples/Mathematics.html)
- [Literate Programming](https://www.pbr-book.org/3ed-2018/Introduction/Literate_Programming)
- [제노블레이도 2 ray marching을사용한 구름 표현](https://www.slideshare.net/leemwymw/2-ray-marching)
- [WebGL Shadertoy](https://webglfundamentals.org/webgl/lessons/ko/webgl-shadertoy.html)
- [cloud simulation ue4 - Google Search](https://www.google.com/search?q=cloud+simulation+ue4&client=ms-android-samsung-ss&ei=IPkcYu_IDuy4mAXz4KCwBg&oq=cloud+simulation+ue4&gs_lcp=ChNtb2JpbGUtZ3dzLXdpei1zZXJwEAM6BwgAEEcQsAM6BAgAEEM6BQgAEIAEOgsILhCABBDHARDRAzoGCAAQChBDOgQIABAeOgYIABAIEB46BQghEKABSgQIQRgAULMIWKE6YOY7aAFwAXgAgAGyAYgB_xKSAQQwLjE1mAEAoAEByAEIwAEB&sclient=mobile-gws-wiz-serp)

</div></details>

## 언리얼 엔진 트랜스폼 추가내용

1. 절대 위치를 기준으로 변경사항을 블루프린트로 적용하면, 블루프린트에 실제로 절대 위치로 저장됩니다.
2. 차일드 액터에 대해서, 블루프린트로 리셋을 할 경우 한번에 바로 적용되지 않습니다. 두번 적용해야 실제로 적용됩니다.

# CI/CD

CI/CD는 애플리케이션 개발 단계부터 배포 때까지의 모든 단계를 자동화를 통해서 좀 더 효율적이고 빠르게 사용자에게 빈번히 배포할 수 있는 것을 말합니다.

CI/CD의 개념만을 두고 보자면 자동화와 직접적으로 관련이 있지는 않습니다. 하지만 그럼에도 자동화라는 키워드는 CI/CD라는 단어에 거의 항상 따라붙습니다.

* CI/CD는 DevOps 엔지니어의 핵심 업무라고 불리기도 합니다.

[CI/CD](https://artist-developer.tistory.com/24)
[CI/CD란 무엇인가](https://jud00.tistory.com/entry/CICD%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C)

## mermaid setting

[mermaid setting](https://frhyme.github.io/mermaid/Embedding_mermaid_in_github_page/)

- **MVP sketch (Minimum Viable Produc)**

MVP릴리스에 중점을 둔다는 것은 개발자가 잠재적으로 길고(아마도) 불필요한 작업을 필 수 있음을 의미합니다. 대신 작업 버전을 반복하고 피드백에 응답하여 제품 요구 사항에 대한 가정에 도전하고 검증합니다.