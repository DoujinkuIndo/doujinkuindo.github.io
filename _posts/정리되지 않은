
개인적으로 호기심이 생겨서 
[How to play a video in unreal engine](https://www.youtube.com/watch?v=-ihpQRqbeUQ)
[Create-module](Useage-Create-module)

[호스팅 및 네트워킹 가이드](https://docs.unrealengine.com/5.0/ko/hosting-and-networking-guide-for-pixel-streaming-in-unreal-engine/)도 참고할 수 있습니다.

? 머리로 생각하는데 한계가 있으니, 적으면서 하자.

? 로직을 하나로 합치는 것은, Iterator에 대해서 깊게 이해하지 못했기 때문에, 잘못된 결론에 도달했다고 볼 수 있나?

? 뭐지. Unreal은 Normal을 이용해서 Tail을 슬라이드 하네요? 약간의 연산정도는 더 해도 된다는 걸까요?   
! 정신건강에 안 좋네.
! pragma optimize
! 한번에 여러가지 생각이 혼합되면, 이상한 결과물이 나온다. 한번에 하나씩 생각하자.

! 실제 구현된 결과물을 보고 코드를 작성해야 삽질하는 시간을 줄일 수 있다.

? FABRIK에는 제약조건이 없네요. IK를 봐야 할까요?

? 로직을 나눌 수 있을 줄 알았지만, 나누지 못하네, 그냥 반복하는게 더 단순한가?

! KISS를 항상 명심합시다. 단순하게 작성할 때가 가장 효율적이다. 아키텍쳐만 고려하자.

? Array로 만든 이유가 있구나. 이상한거 추가하지 말고, 알고리즘을 따라서 행동하는 것이 더 이득인가?

? 안보고 코드 작성하려니 토할것 같네.

? 너무 생각하면 안좋은 결과가 나온다. 간단한 로직을 구현하고, 작동되는 것을 본다음. 그 다음 작성하도록 한다.

? 리팩토링 말고는 좋은 코드를 작성할 수 있는 방법이 없는 것인가?,,, 한번에 여러가지를 생각하지를 못하겠네.

? 유지보수를 생각하는 게으른 나를 추가하도록 하자.

* 관절에 제약조건을 추가할 수 있습니다.   
* 선 이외의 개체를 이동하는 것도 가능합니다. (ex. 단단한 삼각형)   
* 핵심 아이디어를 이해하면, 다양하게 적용할 수 있습니다.

1. 별생각 없이 로직 구현.
2. 테스트.
3. 함수 파라메터 정리.
4. 테스트.
5. 리팩토링.
6. 테스트.
7. 아키텍쳐에 따라 코드 재구성.
8. 테스트.

! 코드는 적정선만큼 작성하는 것이 좋다.
! 일단 구현된 결과물을 보고 다음 단계로 넘어가는 것이 좋다?
! 어렵네. 빠르게 생각없이 구현하고, 내제된 오류 를 찾은다음, 재사용이 용이한 코드를 작성하면서, 주석이 필요없는 깔끔한 코드를 작성하면서, 효율적인 코드를 작성하기란.
! 요구사항을 정했으면, 나눠서 하나씩 연습하면 되는 것 아닌가? 

? 코드퀄리티를 높이기 위해서, https://just-do-it-unyong.tistory.com/entry/%EC%A0%95%EB%8B%B5%EC%9D%84-%EA%B3%A0%EC%B9%98%EB%A9%B4-%ED%8B%80%EB%A6%AC%EB%8A%94-%EC%9D%B4%EC%9C%A0-%EC%9D%B4-%EA%B8%80-%ED%95%98%EB%82%98%EB%A1%9C-%EC%A0%95%EB%A6%AC%ED%95%A9%EB%8B%88%EB%8B%A4-feat-%ED%95%B4%EA%B2%B0%EC%B1%85-%EC%A0%9C%EC%8B%9C 를 참고해야 할까? 클린코드 읽어봐야지.